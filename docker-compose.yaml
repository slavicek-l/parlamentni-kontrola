version: "3.9"

x-backend-env: &backend-env
  ENV: ${ENV:-dev}
  BACKEND_HOST: 0.0.0.0
  BACKEND_PORT: 8000
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  POSTGRES_USER: ${POSTGRES_USER:-app}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
  POSTGRES_DB: ${POSTGRES_DB:-pkontrola}
  POSTGRES_HOST: db
  POSTGRES_PORT: 5432
  REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
  CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/1}
  CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/2}
  CORS_ORIGINS: ${CORS_ORIGINS}
  API_RATE_LIMIT_PER_MIN: ${API_RATE_LIMIT_PER_MIN:-120}
  API_AUTH_MODE: ${API_AUTH_MODE:-none}
  API_KEYS: ${API_KEYS:-devkey1}
  JWT_SECRET: ${JWT_SECRET:-devsecret}
  JWT_ALG: ${JWT_ALG:-HS256}
  JWT_ACCESS_TTL: ${JWT_ACCESS_TTL:-3600}
  PSP_DATA_BASE: ${PSP_DATA_BASE}
  ETL_DOWNLOAD_DIR: /data/downloads
  ETL_WORK_DIR: /data/work
  ETL_USER_AGENT: ${ETL_USER_AGENT}
  ETL_AUDIT_ALERT_THRESHOLD: ${ETL_AUDIT_ALERT_THRESHOLD}

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
      POSTGRES_DB: ${POSTGRES_DB:-pkontrola}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "no"]
    ports:
      - "6379:6379"

  backend:
    build: ./backend
    environment:
      <<: *backend-env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - backend_data:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health/live"]
      interval: 10s
      timeout: 5s
      retries: 30

  worker:
    build: ./backend
    command: ["celery", "-A", "app.celery_app:celery_app", "worker", "--loglevel=INFO", "--queues=etl,default"]
    environment:
      <<: *backend-env
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
      - backend_data:/data

  scheduler:
    build: ./backend
    command: ["celery", "-A", "app.celery_app:celery_app", "beat", "--loglevel=INFO"]
    environment:
      <<: *backend-env
      CELERY_BEAT_ENABLED: "true"
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
      - backend_data:/data

  frontend:
    build: ./frontend
    environment:
      VITE_API_BASE: ${VITE_API_BASE:-http://localhost:8080/api/v1}
      NODE_OPTIONS: --max-old-space-size=1536
    depends_on:
      - backend

  nginx:
    build: ./reverse-proxy
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    ports:
      - "${PUBLIC_PORT:-8080}:80"
    environment:
      - ENV=${ENV:-dev}

volumes:
  db_data:
  backend_data:
